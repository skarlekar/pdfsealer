#!/usr/bin/env python3
"""
Test script for PDF Sealer functionality.
Creates a sample PDF and demonstrates the sealing process.
"""

import os
import tempfile
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from pdf_sealer import PDFProcessor, QRCodeGenerator


def create_sample_pdf(filename: str) -> None:
    """
    Create a sample PDF file for testing.
    
    Args:
        filename: Path where to save the sample PDF
    """
    c = canvas.Canvas(filename, pagesize=letter)
    width, height = letter
    
    # Add some sample content
    c.setFont("Helvetica", 16)
    c.drawString(1*inch, height-2*inch, "Sample PDF Document")
    
    c.setFont("Helvetica", 12)
    c.drawString(1*inch, height-3*inch, "This is a test document created for demonstrating")
    c.drawString(1*inch, height-3.5*inch, "the PDF Sealer functionality.")
    
    c.drawString(1*inch, height-4.5*inch, "Features:")
    c.drawString(1.5*inch, height-5*inch, "• QR code in header")
    c.drawString(1.5*inch, height-5.5*inch, "• Custom footer message")
    c.drawString(1.5*inch, height-6*inch, "• Preserves original content")
    
    # Add a second page
    c.showPage()
    c.setFont("Helvetica", 16)
    c.drawString(1*inch, height-2*inch, "Page 2")
    
    c.setFont("Helvetica", 12)
    c.drawString(1*inch, height-3*inch, "This is the second page of our sample document.")
    c.drawString(1*inch, height-3.5*inch, "The PDF Sealer will add headers and footers")
    c.drawString(1*inch, height-4*inch, "to both pages.")
    
    c.save()
    print(f"Created sample PDF: {filename}")


def test_qr_code_generator():
    """Test QR code generation functionality."""
    print("\n=== Testing QR Code Generator ===")
    
    # Test different QR code sizes
    qr_sizes = ['small', 'medium', 'large']
    
    for size in qr_sizes:
        qr_gen = QRCodeGenerator(size=size)
        
        # Test QR code generation
        test_data = f"https://example.com/test-document-{size}"
        qr_image = qr_gen.generate_qr_code(test_data)
        
        print(f"✓ Generated {size} QR code for: {test_data}")
        print(f"✓ QR code size: {qr_image.size}")
        print(f"✓ QR code points: {qr_gen.size}")
        
        # Test saving QR code
        temp_qr_file = f"test_qr_code_{size}.png"
        qr_gen.save_qr_code(test_data, temp_qr_file)
        print(f"✓ Saved QR code to: {temp_qr_file}")
        
        # Clean up
        if os.path.exists(temp_qr_file):
            os.remove(temp_qr_file)


def test_pdf_processor():
    """Test PDF processing functionality."""
    print("\n=== Testing PDF Processor ===")
    
    processor = PDFProcessor()
    
    # Test file validation
    print("Testing file validation...")
    assert processor.validate_input_file("nonexistent.pdf") == False
    print("✓ File validation works correctly")
    
    # Test output path generation
    test_input = "sample.pdf"
    expected_output = "sample_sealed.pdf"
    generated_output = processor.generate_output_path(test_input)
    assert generated_output == expected_output
    print("✓ Output path generation works correctly")


def main():
    """Main test function."""
    print("PDF Sealer Test Suite")
    print("=" * 50)
    
    # Test QR code generator
    test_qr_code_generator()
    
    # Test PDF processor
    test_pdf_processor()
    
    # Create and process a sample PDF
    print("\n=== Testing Full PDF Processing ===")
    
    # Create temporary files
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_input:
        input_pdf = temp_input.name
    
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_output:
        output_pdf = temp_output.name
    
    try:
        # Create sample PDF
        create_sample_pdf(input_pdf)
        
        # Process the PDF
        processor = PDFProcessor()
        qr_data = "https://github.com/your-repo/pdfsealer"
        footer_message = "Test Document - Generated by PDF Sealer"
        
        processor.process_pdf(input_pdf, output_pdf, qr_data, footer_message, 'medium')
        
        print(f"✓ Successfully processed PDF")
        print(f"✓ Input: {input_pdf}")
        print(f"✓ Output: {output_pdf}")
        print(f"✓ QR Data: {qr_data}")
        print(f"✓ Footer: {footer_message}")
        print(f"✓ QR Size: medium")
        
        # Check if output file exists and has content
        if os.path.exists(output_pdf) and os.path.getsize(output_pdf) > 0:
            print("✓ Output file created successfully")
        else:
            print("✗ Output file creation failed")
        
        # Test different QR sizes
        print("\n=== Testing Different QR Sizes ===")
        for size in ['small', 'large']:
            try:
                size_output = f"{output_pdf}_{size}.pdf"
                processor.process_pdf(input_pdf, size_output, qr_data, footer_message, size)
                print(f"✓ Successfully processed PDF with {size} QR code: {size_output}")
                
                # Clean up
                if os.path.exists(size_output):
                    os.remove(size_output)
                    
            except Exception as e:
                print(f"✗ Error processing PDF with {size} QR code: {str(e)}")
            
    except Exception as e:
        print(f"✗ Error during PDF processing: {str(e)}")
    
    finally:
        # Clean up temporary files
        for temp_file in [input_pdf, output_pdf]:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                print(f"✓ Cleaned up: {temp_file}")
    
    print("\n" + "=" * 50)
    print("Test suite completed!")


if __name__ == "__main__":
    main() 